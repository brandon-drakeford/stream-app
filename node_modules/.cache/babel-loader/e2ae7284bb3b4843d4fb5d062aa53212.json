{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brand\\\\OneDrive\\\\Desktop\\\\react-projects\\\\streams\\\\client\\\\src\\\\components\\\\Breadcrumb.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport history from '../history';\nimport { fetchStream } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BreadCrumb(props) {\n  _s();\n\n  useEffect(() => {\n    let url = history.location.pathname;\n    url = url.split('/');\n\n    if (url.length === 4) {\n      props.fetchStream(url[3]);\n    }\n  }, []);\n  console.log(props);\n  const crumbs = [];\n\n  function renderCrumbs() {\n    let breadCrumb,\n        url = '';\n    url = history.location.pathname;\n    breadCrumb = url !== '/' ? /*#__PURE__*/_jsxDEV(Link, {\n      to: `/`,\n      className: \"section\",\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"active section\",\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 85\n    }, this);\n    crumbs.push(breadCrumb);\n    url = url.split('/');\n    url.map((location, index) => {\n      if (location !== null && index <= 2) {\n        crumbs.push( /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"divider\",\n            children: \" / \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"section\",\n            style: {\n              textTransform: 'capitalize'\n            },\n            children: location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this));\n      } else {\n        if (props.stream !== null) {\n          crumbs.push( /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"divider\",\n              children: \" / \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"section\",\n              children: props.stream.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this));\n        }\n      }\n    });\n    return crumbs;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"ui breadcrumb\",\n    children: renderCrumbs()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BreadCrumb, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = BreadCrumb;\n\nconst mapStateToProps = state => {\n  let url = history.location.pathname;\n  url = url.split('/');\n  return {\n    stream: state.streams[url[3]]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(BreadCrumb);\n\nvar _c;\n\n$RefreshReg$(_c, \"BreadCrumb\");","map":{"version":3,"sources":["C:/Users/Brand/OneDrive/Desktop/react-projects/streams/client/src/components/Breadcrumb.js"],"names":["React","useEffect","connect","Link","history","fetchStream","BreadCrumb","props","url","location","pathname","split","length","console","log","crumbs","renderCrumbs","breadCrumb","push","map","index","textTransform","stream","title","mapStateToProps","state","streams"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport history from '../history'\r\nimport { fetchStream } from '../actions'\r\n\r\nfunction BreadCrumb (props) {\r\n\r\n    useEffect(() => {\r\n        let url = history.location.pathname\r\n\r\n        url = url.split('/')\r\n\r\n        if (url.length === 4) {\r\n            props.fetchStream(url[3])\r\n        }\r\n\r\n    }, [])\r\n\r\n    console.log(props)\r\n\r\n    const crumbs = []\r\n\r\n    function renderCrumbs() {\r\n        let breadCrumb, url = ''\r\n\r\n        url = history.location.pathname\r\n\r\n        breadCrumb = url !== '/' ? <Link to={`/`} className=\"section\">Home</Link> : <div class=\"active section\">Home</div>\r\n        \r\n        crumbs.push(breadCrumb)\r\n\r\n        url = url.split('/')\r\n \r\n        url.map((location, index) => {\r\n            \r\n            if (location !== null && index <= 2) {\r\n                crumbs.push(\r\n                    <React.Fragment>\r\n                            <div class=\"divider\"> / </div>\r\n                            <div class=\"section\" style={{ textTransform: 'capitalize' }}>{location}</div>\r\n                    </React.Fragment>)\r\n            } else {\r\n                if (props.stream !== null) {\r\n                    crumbs.push(\r\n                        <React.Fragment>\r\n                                <div class=\"divider\"> / </div>\r\n                                <div class=\"section\">{props.stream.title}</div>\r\n                        </React.Fragment>)\r\n                }   \r\n            }\r\n        }) \r\n\r\n        return crumbs;\r\n    }\r\n\r\n    return (\r\n        <div class=\"ui breadcrumb\">\r\n            {renderCrumbs()}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let url = history.location.pathname\r\n    url = url.split('/')\r\n\r\n    return {\r\n        stream: state.streams[url[3]]\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, {fetchStream})(BreadCrumb)"]},"metadata":{},"sourceType":"module"}