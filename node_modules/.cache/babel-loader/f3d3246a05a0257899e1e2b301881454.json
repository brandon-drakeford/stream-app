{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brand\\\\OneDrive\\\\Desktop\\\\react-projects\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamEdit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { fetchStream, editStream } from '../../actions';\nimport StreamForm from './StreamForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StreamEdit(props) {\n  _s();\n\n  useEffect(() => {\n    props.fetchStream(props.match.params.id);\n  }, []);\n\n  function onSubmit(formValues) {\n    props.editStream(props.match.params.id, formValues);\n  }\n\n  if (!props.stream) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"...Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Edit a Stream\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(StreamForm, {\n      initialValues: _.pick(props.stream, 'title', 'description'),\n      onSubmit: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 13\n  }, this);\n}\n\n_s(StreamEdit, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = StreamEdit;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);\n\nvar _c;\n\n$RefreshReg$(_c, \"StreamEdit\");","map":{"version":3,"sources":["C:/Users/Brand/OneDrive/Desktop/react-projects/streams/client/src/components/streams/StreamEdit.js"],"names":["React","useEffect","_","connect","fetchStream","editStream","StreamForm","StreamEdit","props","match","params","id","onSubmit","formValues","stream","pick","mapStateToProps","state","ownProps","streams"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAExBP,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,KAAK,CAACJ,WAAN,CAAkBI,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmBC,EAArC;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,QAAT,CAAmBC,UAAnB,EAA+B;AAC3BL,IAAAA,KAAK,CAACH,UAAN,CAAiBG,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmBC,EAApC,EAAwCE,UAAxC;AACH;;AAED,MAAI,CAACL,KAAK,CAACM,MAAX,EAAkB;AACd,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBAAQ;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI,QAAC,UAAD;AAAY,MAAA,aAAa,EAAEZ,CAAC,CAACa,IAAF,CAAOP,KAAK,CAACM,MAAb,EAAqB,OAArB,EAA8B,aAA9B,CAA3B;AAAyE,MAAA,QAAQ,EAAEF;AAAnF;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAMH;;GApBQL,U;;KAAAA,U;;AAsBT,MAAMS,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AACHJ,IAAAA,MAAM,EAAEG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACT,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AADL,GAAP;AAGH,CAJD;;AAMA,eAAeR,OAAO,CAACa,eAAD,EAAkB;AAAEZ,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAlB,CAAP,CAAsDE,UAAtD,CAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux'\r\nimport { fetchStream, editStream } from '../../actions'\r\nimport StreamForm from './StreamForm';\r\n\r\nfunction StreamEdit (props) {\r\n\r\n    useEffect(() => {\r\n        props.fetchStream(props.match.params.id)\r\n    }, [])\r\n\r\n    function onSubmit (formValues) {\r\n        props.editStream(props.match.params.id, formValues)\r\n    }\r\n\r\n    if (!props.stream){\r\n        return <div>...Loading</div>\r\n    }\r\n\r\n    return (<div>\r\n                <h3>Edit a Stream</h3>\r\n\r\n                <StreamForm initialValues={_.pick(props.stream, 'title', 'description')} onSubmit={onSubmit} />\r\n            </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        stream: state.streams[ownProps.match.params.id]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchStream, editStream })(StreamEdit)"]},"metadata":{},"sourceType":"module"}